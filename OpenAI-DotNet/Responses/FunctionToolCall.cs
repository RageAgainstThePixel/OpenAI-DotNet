// Licensed under the MIT License. See LICENSE in the project root for license information.

using System.Text.Json.Serialization;

namespace OpenAI.Responses
{
    /// <summary>
    /// A tool call to run a function.
    /// </summary>
    public sealed class FunctionToolCall : BaseResponse, IResponseItem
    {
        public FunctionToolCall() { }

        public FunctionToolCall(Tool tool)
        {
            Type = ResponseItemType.FunctionCall;
            Name = tool.Function.Name;
            Arguments = tool.Function.Arguments?.ToString() ?? string.Empty;
        }

        public FunctionToolCall(ToolCall toolCall, string output)
        {
            Type = ResponseItemType.FunctionCallOutput;
            Name = toolCall.Function.Name;
            CallId = toolCall.Id;
            Output = output;
        }

        /// <inheritdoc />
        [JsonInclude]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        [JsonPropertyName("id")]
        public string Id { get; private set; }

        /// <inheritdoc />
        [JsonInclude]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonPropertyName("type")]
        public ResponseItemType Type { get; private set; } = ResponseItemType.FunctionCall;

        /// <inheritdoc />
        [JsonInclude]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        [JsonPropertyName("object")]
        public string Object { get; private set; }

        /// <inheritdoc />
        [JsonInclude]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        [JsonPropertyName("status")]
        public ResponseStatus Status { get; private set; }

        /// <summary>
        /// The unique ID of the function tool call generated by the model.
        /// </summary>
        [JsonInclude]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        [JsonPropertyName("call_id")]
        public string CallId { get; private set; }

        /// <summary>
        /// The name of the function to run.
        /// </summary>
        [JsonInclude]
        [JsonPropertyName("name")]
        public string Name { get; private set; }

        /// <summary>
        /// A JSON string of the arguments to pass to the function.
        /// </summary>
        [JsonInclude]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        [JsonPropertyName("arguments")]
        public string Arguments { get; private set; }

        /// <summary>
        /// A JSON string of the output of the function tool call.
        /// </summary>
        [JsonInclude]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        [JsonPropertyName("output")]
        public string Output { get; private set; }
    }
}
