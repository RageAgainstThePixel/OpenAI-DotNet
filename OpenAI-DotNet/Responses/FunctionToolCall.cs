// Licensed under the MIT License. See LICENSE in the project root for license information.

using OpenAI.Extensions;
using System.Text.Json;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

namespace OpenAI.Responses
{
    /// <summary>
    /// A tool call to run a function.
    /// </summary>
    public sealed class FunctionToolCall : BaseResponse, IResponseItem, IToolCall
    {
        public FunctionToolCall() { }

        public FunctionToolCall(string callId, string name, JsonNode arguments)
        {
            CallId = callId;
            Name = name;
            Arguments = arguments;
        }

        /// <inheritdoc />
        [JsonInclude]
        [JsonPropertyName("id")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string Id { get; private set; }

        [JsonInclude]
        [JsonPropertyName("type")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        public ResponseItemType Type { get; private set; } = ResponseItemType.FunctionCall;

        /// <inheritdoc />
        [JsonInclude]
        [JsonPropertyName("object")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string Object { get; private set; }

        /// <inheritdoc />
        [JsonInclude]
        [JsonPropertyName("status")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public ResponseStatus Status { get; private set; }

        /// <summary>
        /// The unique ID of the function tool call generated by the model.
        /// </summary>
        [JsonInclude]
        [JsonPropertyName("call_id")]
        public string CallId { get; private set; }

        /// <summary>
        /// The name of the function to run.
        /// </summary>
        [JsonInclude]
        [JsonPropertyName("name")]
        public string Name { get; private set; }

        private string argumentsString;

        private JsonNode arguments;

        /// <summary>
        /// The arguments to use when calling the function.
        /// </summary>
        [JsonInclude]
        [JsonPropertyName("arguments")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public JsonNode Arguments
        {
            get
            {
                if (arguments == null)
                {
                    if (!string.IsNullOrWhiteSpace(argumentsString))
                    {
                        arguments = JsonValue.Create(argumentsString);
                    }
                    else
                    {
                        arguments = null;
                    }
                }

                return arguments;
            }
            internal set => arguments = value;
        }

        [JsonIgnore]
        internal string Delta
        {
            set => argumentsString += value;
        }

        public FunctionToolCallOutput InvokeFunction()
        {
            var result = ToolExtensions.InvokeFunction(this);
            return new FunctionToolCallOutput(this, result);
        }

        public FunctionToolCallOutput<T> InvokeFunction<T>(JsonSerializerOptions options = null)
        {
            var result = ToolExtensions.InvokeFunction<T>(this);
            return new(this, result, JsonSerializer.Serialize(result, options ?? OpenAIClient.JsonSerializationOptions));
        }

        public async Task<FunctionToolCallOutput> InvokeFunctionAsync(CancellationToken cancellationToken = default)
        {
            var result = await ToolExtensions.InvokeFunctionAsync(this, cancellationToken).ConfigureAwait(false);
            return new FunctionToolCallOutput(this, result);
        }

        public async Task<FunctionToolCallOutput<T>> InvokeFunctionAsync<T>(JsonSerializerOptions options = null, CancellationToken cancellationToken = default)
        {
            var result = await this.InvokeFunctionAsync<T>(cancellationToken).ConfigureAwait(false);
            return new(this, result, JsonSerializer.Serialize(result, options ?? OpenAIClient.JsonSerializationOptions));
        }
    }
}
