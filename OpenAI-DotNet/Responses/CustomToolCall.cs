// Licensed under the MIT License. See LICENSE in the project root for license information.

using System.Text.Json.Nodes;
using System.Text.Json.Serialization;

namespace OpenAI.Responses
{
    public sealed class CustomToolCall : BaseResponse, IResponseItem, IToolCall
    {
        /// <inheritdoc />
        [JsonInclude]
        [JsonPropertyName("id")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string Id { get; private set; }

        [JsonInclude]
        [JsonPropertyName("type")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        public ResponseItemType Type { get; private set; } = ResponseItemType.CustomToolCall;

        /// <inheritdoc />
        [JsonInclude]
        [JsonPropertyName("object")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string Object { get; private set; }

        /// <inheritdoc />
        [JsonInclude]
        [JsonPropertyName("status")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public ResponseStatus Status { get; private set; }

        /// <summary>
        /// The unique ID of the function tool call generated by the model.
        /// </summary>
        [JsonInclude]
        [JsonPropertyName("call_id")]
        public string CallId { get; private set; }

        /// <summary>
        /// The name of the function to run.
        /// </summary>
        [JsonInclude]
        [JsonPropertyName("name")]
        public string Name { get; private set; }

        [JsonIgnore]
        public JsonNode Arguments => null;

        /// <summary>
        /// The input for the custom tool call generated by the model.
        /// </summary>
        [JsonInclude]
        [JsonPropertyName("input")]
        public string Input { get; internal set; }

        private string delta;

        [JsonIgnore]
        public string Delta
        {
            get => delta;
            internal set
            {
                if (value == null)
                {
                    delta = null;
                }
                else
                {
                    delta += value;
                }
            }
        }
    }
}
