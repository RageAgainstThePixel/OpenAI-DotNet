// Licensed under the MIT License. See LICENSE in the project root for license information.

using System.Text.Json.Serialization;

namespace OpenAI.Responses
{
    public sealed class CustomToolCallOutput : BaseResponse, IResponseItem
    {
        public CustomToolCallOutput() { }

        public CustomToolCallOutput(CustomToolCall toolCall, string output)
        {
            CallId = toolCall.CallId;
            Output = output;
        }

        public CustomToolCallOutput(string callId, string output)
        {
            CallId = callId;
            Output = output;
        }

        /// <inheritdoc />
        [JsonInclude]
        [JsonPropertyName("id")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string Id { get; private set; }

        /// <inheritdoc />
        [JsonInclude]
        [JsonPropertyName("type")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        public ResponseItemType Type { get; private set; } = ResponseItemType.CustomToolCallOutput;

        /// <inheritdoc />
        [JsonInclude]
        [JsonPropertyName("object")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string Object { get; private set; }

        /// <inheritdoc />
        [JsonInclude]
        [JsonPropertyName("status")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public ResponseStatus Status { get; private set; }

        /// <summary>
        /// The unique ID of the function tool call generated by the model.
        /// </summary>
        [JsonInclude]
        [JsonPropertyName("call_id")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string CallId { get; private set; }

        /// <summary>
        /// A JSON string of the output of the function tool call.
        /// </summary>
        [JsonInclude]
        [JsonPropertyName("output")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string Output { get; private set; }

        public override string ToString()
            => Output;
    }
}
